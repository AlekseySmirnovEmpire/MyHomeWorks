#include <iostream>
#include <string>

void showBubbles(bool arr[][12]) {
	for (int i = 0; i < 12; i++) {
		for (int j = 0; j < 12; j++) {
			std::cout << (arr[i][j] == true ? "o " : "x ");
		}
		std::cout << std::endl;
	}
	std::cout << "_______________________\n";
}

bool isCorrect(int x, int y) {
	return ((x < 12 && x > 0) && (y < 12 && y > 0));
}

int main() {
	setlocale(LC_ALL, ".UTF8");

	/*После посылки из Китая осталась спец. плёнка для бережной перевозки груза — пупырка. 
	Всего в пупырке 12 на 12 шариков-пузырьков. Состояние любого пузырька — это всегда либо 
	он целый, либо нет, т.е. true или false (тип массива bool). Для начала, требуется 
	реализовать отдельную функцию инициализации пупырки начальным состоянием — полностью 
	целая пупырка, т.е. все элементы true. Но это только самое начало.

	Программа заключается в последовательном лопанье целых регионов пузырьков. Перед каждым 
	таким лопаньем надо показывать пользователю полностью всю плёнку: o — это целый пузырёк, 
	x — лопнутый. Это тоже надо выделить в отдельную функцию. Итак, как выглядит само лопанье. 
	Пользователь вводит две координаты: координаты начала региона и конца прямоугольного региона. 
	Сама процедура лопанья пузырей должна быть реализована с помощью отдельной функции, 
	все аргументы должны проверяться на их валидность, что они в в рамках диапазона возможных 
	значений — иначе должна быть выведена ошибка. После лопанья каждого пузыря, который не был 
	ещё лопнут до того, в консоль должно выводиться сообщение “Pop!”.

	Лопанье должно продолжаться до последнего пузырька. Как только вся пупырка потрачена, программа 
	заканчивает выполнение. В принципе, вы можете подсчитать окончание в самой функции по отображению 
	пузырьков плёнки, т.к. она выполняется после каждого лопанья.*/

	bool bubbles[12][12];  //bool lumpySpacePrinces было бы прикольной отсылкой, да?

	for (int i = 0; i < 12; i++) {
		for (int j = 0; j < 12; j++) {
			bubbles[i][j] = true;
		}
	}

	int counter = 12 * 12;
	bool isOver = (counter == 0);

	showBubbles(bubbles);

	int x1, y1, x2, y2;
	
	do {
		std::cout << "Input start point of aria from 0 to 11 (X1 Y1): ";
		std::cin >> x1 >> y1;

		while (!isCorrect(x1, y1)) {
			std::cout << "Wrong input, try again (X1 Y1): ";
			std::cin >> x1 >> y1;
		}

		std::cout << "Input end point of aria from 0 to 11 (X2 Y2): ";
		std::cin >> x2 >> y2;

		while (!isCorrect(x2, y2)) {
			std::cout << "Wrong input, try again (X1 Y1): ";
			std::cin >> x2 >> y2;
		}
		
		int xmax = x1 > x2 ? x1 : x2;
		int xmin = x1 > x2 ? x2 : x1;
		int ymax = y1 > y2 ? y1 : y2;
		int ymin = y1 > y2 ? y2 : y1;

		bool pop = false;

		for (int i = ymin; i <= ymax; i++) {
			for (int j = xmin; j <= xmax; j++) {
				if (bubbles[i][j]) {
					bubbles[i][j] = false;
					counter--;
					pop = true;
				}
			}
		}

		std::cout << (pop ? "POP!\n" : "\n"); 

		showBubbles(bubbles);

		isOver = (counter == 0);

	} while (!isOver);
}