// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: company.proto

#ifndef PROTOBUF_INCLUDED_company_2eproto
#define PROTOBUF_INCLUDED_company_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_company_2eproto 

namespace protobuf_company_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[1];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_company_2eproto
class Company;
class CompanyDefaultTypeInternal;
extern CompanyDefaultTypeInternal _Company_default_instance_;
namespace google {
namespace protobuf {
template<> ::Company* Arena::CreateMaybeMessage<::Company>(Arena*);
}  // namespace protobuf
}  // namespace google

// ===================================================================

class Company : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Company) */ {
 public:
  Company();
  virtual ~Company();

  Company(const Company& from);

  inline Company& operator=(const Company& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Company(Company&& from) noexcept
    : Company() {
    *this = ::std::move(from);
  }

  inline Company& operator=(Company&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Company& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Company* internal_default_instance() {
    return reinterpret_cast<const Company*>(
               &_Company_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(Company* other);
  friend void swap(Company& a, Company& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Company* New() const final {
    return CreateMaybeMessage<Company>(NULL);
  }

  Company* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Company>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Company& from);
  void MergeFrom(const Company& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Company* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string title = 1;
  bool has_title() const;
  void clear_title();
  static const int kTitleFieldNumber = 1;
  const ::std::string& title() const;
  void set_title(const ::std::string& value);
  #if LANG_CXX11
  void set_title(::std::string&& value);
  #endif
  void set_title(const char* value);
  void set_title(const char* value, size_t size);
  ::std::string* mutable_title();
  ::std::string* release_title();
  void set_allocated_title(::std::string* title);

  // required string address = 2;
  bool has_address() const;
  void clear_address();
  static const int kAddressFieldNumber = 2;
  const ::std::string& address() const;
  void set_address(const ::std::string& value);
  #if LANG_CXX11
  void set_address(::std::string&& value);
  #endif
  void set_address(const char* value);
  void set_address(const char* value, size_t size);
  ::std::string* mutable_address();
  ::std::string* release_address();
  void set_allocated_address(::std::string* address);

  // optional string work = 4;
  bool has_work() const;
  void clear_work();
  static const int kWorkFieldNumber = 4;
  const ::std::string& work() const;
  void set_work(const ::std::string& value);
  #if LANG_CXX11
  void set_work(::std::string&& value);
  #endif
  void set_work(const char* value);
  void set_work(const char* value, size_t size);
  ::std::string* mutable_work();
  ::std::string* release_work();
  void set_allocated_work(::std::string* work);

  // required int32 yearOfFoundation = 3;
  bool has_yearoffoundation() const;
  void clear_yearoffoundation();
  static const int kYearOfFoundationFieldNumber = 3;
  ::google::protobuf::int32 yearoffoundation() const;
  void set_yearoffoundation(::google::protobuf::int32 value);

  // optional bool outWork = 5;
  bool has_outwork() const;
  void clear_outwork();
  static const int kOutWorkFieldNumber = 5;
  bool outwork() const;
  void set_outwork(bool value);

  // @@protoc_insertion_point(class_scope:Company)
 private:
  void set_has_title();
  void clear_has_title();
  void set_has_address();
  void clear_has_address();
  void set_has_yearoffoundation();
  void clear_has_yearoffoundation();
  void set_has_work();
  void clear_has_work();
  void set_has_outwork();
  void clear_has_outwork();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr title_;
  ::google::protobuf::internal::ArenaStringPtr address_;
  ::google::protobuf::internal::ArenaStringPtr work_;
  ::google::protobuf::int32 yearoffoundation_;
  bool outwork_;
  friend struct ::protobuf_company_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Company

// required string title = 1;
inline bool Company::has_title() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Company::set_has_title() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Company::clear_has_title() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Company::clear_title() {
  title_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_title();
}
inline const ::std::string& Company::title() const {
  // @@protoc_insertion_point(field_get:Company.title)
  return title_.GetNoArena();
}
inline void Company::set_title(const ::std::string& value) {
  set_has_title();
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Company.title)
}
#if LANG_CXX11
inline void Company::set_title(::std::string&& value) {
  set_has_title();
  title_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Company.title)
}
#endif
inline void Company::set_title(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_title();
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Company.title)
}
inline void Company::set_title(const char* value, size_t size) {
  set_has_title();
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Company.title)
}
inline ::std::string* Company::mutable_title() {
  set_has_title();
  // @@protoc_insertion_point(field_mutable:Company.title)
  return title_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Company::release_title() {
  // @@protoc_insertion_point(field_release:Company.title)
  if (!has_title()) {
    return NULL;
  }
  clear_has_title();
  return title_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Company::set_allocated_title(::std::string* title) {
  if (title != NULL) {
    set_has_title();
  } else {
    clear_has_title();
  }
  title_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), title);
  // @@protoc_insertion_point(field_set_allocated:Company.title)
}

// required string address = 2;
inline bool Company::has_address() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Company::set_has_address() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Company::clear_has_address() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Company::clear_address() {
  address_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_address();
}
inline const ::std::string& Company::address() const {
  // @@protoc_insertion_point(field_get:Company.address)
  return address_.GetNoArena();
}
inline void Company::set_address(const ::std::string& value) {
  set_has_address();
  address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Company.address)
}
#if LANG_CXX11
inline void Company::set_address(::std::string&& value) {
  set_has_address();
  address_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Company.address)
}
#endif
inline void Company::set_address(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_address();
  address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Company.address)
}
inline void Company::set_address(const char* value, size_t size) {
  set_has_address();
  address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Company.address)
}
inline ::std::string* Company::mutable_address() {
  set_has_address();
  // @@protoc_insertion_point(field_mutable:Company.address)
  return address_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Company::release_address() {
  // @@protoc_insertion_point(field_release:Company.address)
  if (!has_address()) {
    return NULL;
  }
  clear_has_address();
  return address_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Company::set_allocated_address(::std::string* address) {
  if (address != NULL) {
    set_has_address();
  } else {
    clear_has_address();
  }
  address_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), address);
  // @@protoc_insertion_point(field_set_allocated:Company.address)
}

// required int32 yearOfFoundation = 3;
inline bool Company::has_yearoffoundation() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Company::set_has_yearoffoundation() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Company::clear_has_yearoffoundation() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Company::clear_yearoffoundation() {
  yearoffoundation_ = 0;
  clear_has_yearoffoundation();
}
inline ::google::protobuf::int32 Company::yearoffoundation() const {
  // @@protoc_insertion_point(field_get:Company.yearOfFoundation)
  return yearoffoundation_;
}
inline void Company::set_yearoffoundation(::google::protobuf::int32 value) {
  set_has_yearoffoundation();
  yearoffoundation_ = value;
  // @@protoc_insertion_point(field_set:Company.yearOfFoundation)
}

// optional string work = 4;
inline bool Company::has_work() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Company::set_has_work() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Company::clear_has_work() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Company::clear_work() {
  work_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_work();
}
inline const ::std::string& Company::work() const {
  // @@protoc_insertion_point(field_get:Company.work)
  return work_.GetNoArena();
}
inline void Company::set_work(const ::std::string& value) {
  set_has_work();
  work_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Company.work)
}
#if LANG_CXX11
inline void Company::set_work(::std::string&& value) {
  set_has_work();
  work_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Company.work)
}
#endif
inline void Company::set_work(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_work();
  work_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Company.work)
}
inline void Company::set_work(const char* value, size_t size) {
  set_has_work();
  work_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Company.work)
}
inline ::std::string* Company::mutable_work() {
  set_has_work();
  // @@protoc_insertion_point(field_mutable:Company.work)
  return work_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Company::release_work() {
  // @@protoc_insertion_point(field_release:Company.work)
  if (!has_work()) {
    return NULL;
  }
  clear_has_work();
  return work_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Company::set_allocated_work(::std::string* work) {
  if (work != NULL) {
    set_has_work();
  } else {
    clear_has_work();
  }
  work_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), work);
  // @@protoc_insertion_point(field_set_allocated:Company.work)
}

// optional bool outWork = 5;
inline bool Company::has_outwork() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Company::set_has_outwork() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Company::clear_has_outwork() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Company::clear_outwork() {
  outwork_ = false;
  clear_has_outwork();
}
inline bool Company::outwork() const {
  // @@protoc_insertion_point(field_get:Company.outWork)
  return outwork_;
}
inline void Company::set_outwork(bool value) {
  set_has_outwork();
  outwork_ = value;
  // @@protoc_insertion_point(field_set:Company.outWork)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_company_2eproto
